const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const mongoose = require('mongoose');
const User = require('../models/UserModel.js');

const router = express.Router();

router.post('/register', async (req, res) => {
    const { name, email, password } = req.body;
    console.log('üõ† ƒêƒÉng k√Ω ng∆∞·ªùi d√πng:', { name, email });

    try {
        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!email || !password || !name) {
            console.log('‚ùå Thi·∫øu th√¥ng tin:', { name, email, password });
            return res.status(400).json({ success: false, message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß t√™n, email v√† m·∫≠t kh·∫©u' });
        }

        const existingUser = await User.findOne({ email });
        if (existingUser) {
            console.log('‚ùå Email ƒë√£ t·ªìn t·∫°i:', email);
            return res.json({ success: false, message: 'Email ƒë√£ t·ªìn t·∫°i' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const newUser = new User({ name, email, password: hashedPassword });
        await newUser.save();

        // Ki·ªÉm tra JWT_SECRET
        if (!process.env.JWT_SECRET) {
            console.error('‚ùå Bi·∫øn m√¥i tr∆∞·ªùng JWT_SECRET kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a');
            return res.status(500).json({ success: false, message: 'L·ªói server: Thi·∫øu c·∫•u h√¨nh JWT_SECRET' });
        }

        const token = jwt.sign({ id: newUser._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
        console.log('‚úÖ ƒê√£ t·∫°o token cho ng∆∞·ªùi d√πng:', { userId: newUser._id, token });
        res.json({ success: true, token });
    } catch (error) {
        console.error('‚ùå L·ªói server khi ƒëƒÉng k√Ω:', error.message);
        res.status(500).json({ success: false, message: 'L·ªói server: ' + error.message });
    }
});

router.post('/login', async (req, res) => {
    const { email, password } = req.body;
    console.log('üõ† ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng:', { email, password });

    try {
        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!email || !password) {
            console.log('‚ùå Thi·∫øu th√¥ng tin:', { email, password });
            return res.status(400).json({ success: false, message: 'Vui l√≤ng cung c·∫•p email v√† m·∫≠t kh·∫©u' });
        }

        // Ki·ªÉm tra tr·∫°ng th√°i MongoDB
        if (mongoose.connection.readyState !== 1) {
            console.error('‚ùå MongoDB ch∆∞a k·∫øt n·ªëi');
            return res.status(500).json({ success: false, message: 'L·ªói server: Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi database' });
        }

        const user = await User.findOne({ email });
        if (!user) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng:', email);
            return res.status(401).json({ success: false, message: 'Sai email ho·∫∑c m·∫≠t kh·∫©u' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            console.log('‚ùå M·∫≠t kh·∫©u kh√¥ng kh·ªõp:', email);
            return res.status(401).json({ success: false, message: 'Sai email ho·∫∑c m·∫≠t kh·∫©u' });
        }

        // Ki·ªÉm tra JWT_SECRET
        if (!process.env.JWT_SECRET) {
            console.error('‚ùå Bi·∫øn m√¥i tr∆∞·ªùng JWT_SECRET kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a');
            return res.status(500).json({ success: false, message: 'L·ªói server: Thi·∫øu c·∫•u h√¨nh JWT_SECRET' });
        }

        const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
        console.log('‚úÖ ƒê√£ t·∫°o token cho ng∆∞·ªùi d√πng:', { userId: user._id, token });
        res.json({ success: true, token });
    } catch (error) {
        console.error('‚ùå L·ªói server khi ƒëƒÉng nh·∫≠p:', error.message);
        res.status(500).json({ success: false, message: 'L·ªói server: ' + error.message });
    }
});

module.exports = router;