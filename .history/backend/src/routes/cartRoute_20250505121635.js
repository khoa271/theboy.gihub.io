const express = require('express');
const router = express.Router();
const Cart = require('../models/cartModel.js');
const Product = require('../models/ProductModel.js');
const verifyToken = require('../middlewares/cart.js');

// L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
router.get('/get', verifyToken, async (req, res) => {
    try {
        const userId = req.user.id;
        console.log('üõ† L·∫•y gi·ªè h√†ng cho userId:', userId);
        const cart = await Cart.findOne({ userId }) || { items: {} };
        res.json({ success: true, cart: cart.items });
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y gi·ªè h√†ng:', error.message);
        res.status(500).json({ success: false, message: 'L·ªói server: ' + error.message });
    }
});

// L·∫•y t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè
router.get('/count', verifyToken, async (req, res) => {
    try {
        const userId = req.user.id;
        console.log('üõ† T√≠nh t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m cho userId:', userId);
        const cart = await Cart.findOne({ userId });
        if (!cart) {
            console.log('‚úÖ Gi·ªè h√†ng r·ªóng');
            return res.json({ success: true, count: 0 });
        }

        const count = Object.values(cart.items).reduce((total, sizes) => 
            total + Object.values(sizes).reduce((sum, qty) => sum + qty, 0), 0
        );

        console.log('‚úÖ T·ªïng s·ªë l∆∞·ª£ng:', count);
        res.json({ success: true, count });
    } catch (error) {
        console.error('‚ùå L·ªói khi t√≠nh t·ªïng s·ªë l∆∞·ª£ng:', error.message);
        res.status(500).json({ success: false, message: 'L·ªói server: ' + error.message });
    }
});

// C·∫≠p nh·∫≠t gi·ªè h√†ng
router.post('/update', verifyToken, async (req, res) => {
    try {
        const { itemId, size, quantity } = req.body;
        const userId = req.user.id;
        console.log('üõ† C·∫≠p nh·∫≠t gi·ªè h√†ng:', { userId, itemId, size, quantity });

        // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
        const product = await Product.findById(itemId);
        if (!product) {
            console.log('‚ùå S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i:', itemId);
            return res.status(400).json({ success: false, message: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i' });
        }

        let cart = await Cart.findOne({ userId });
        if (!cart) {
            console.log('üõ† T·∫°o gi·ªè h√†ng m·ªõi cho userId:', userId);
            cart = new Cart({ userId, items: {} });
        }

        if (quantity > 0) {
            cart.items[itemId] = cart.items[itemId] || {};
            cart.items[itemId][size] = quantity;
        } else {
            if (cart.items[itemId]?.[size]) {
                delete cart.items[itemId][size];
                if (Object.keys(cart.items[itemId]).length === 0) {
                    delete cart.items[itemId];
                }
            }
        }

        await cart.save();
        console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi·ªè h√†ng:', cart.items);
        res.json({ success: true, cart: cart.items });
    } catch (error) {
        console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng:', error.message);
        res.status(500).json({ success: false, message: 'L·ªói server: ' + error.message });
    }
});

// X√≥a gi·ªè h√†ng
router.delete('/clear', verifyToken, async (req, res) => {
    try {
        const userId = req.user.id;
        console.log('üõ† X√≥a gi·ªè h√†ng cho userId:', userId);
        await Cart.updateOne({ userId }, { $set: { items: {} } });
        console.log('‚úÖ ƒê√£ x√≥a gi·ªè h√†ng');
        res.json({ success: true, message: 'ƒê√£ x√≥a gi·ªè h√†ng' });
    } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a gi·ªè h√†ng:', error.message);
        res.status(500).json({ success: false, message: 'L·ªói server: ' + error.message });
    }
});

// T√≠nh t·ªïng ti·ªÅn gi·ªè h√†ng
router.get('/total', verifyToken, async (req, res) => {
    try {
        const userId = req.user.id;
        console.log('üõ† T√≠nh t·ªïng ti·ªÅn gi·ªè h√†ng cho userId:', userId);
        const cart = await Cart.findOne({ userId });
        if (!cart) {
            console.log('‚úÖ Gi·ªè h√†ng r·ªóng');
            return res.json({ success: true, total: 0 });
        }

        let total = 0;
        for (const itemId in cart.items) {
            const product = await Product.findById(itemId);
            if (product) {
                for (const size in cart.items[itemId]) {
                    total += product.price * cart.items[itemId][size];
                }
            }
        }

        console.log('‚úÖ T·ªïng ti·ªÅn:', total);
        res.json({ success: true, total });
    } catch (error) {
        console.error('‚ùå L·ªói khi t√≠nh t·ªïng ti·ªÅn:', error.message);
        res.status(500).json({ success: false, message: 'L·ªói server: ' + error.message });
    }
});

module.exports = router;